
"""Code developed by Itzel Martinez Bautista, Roberto Luis Rodriguez, Ulysses Vazquez-Perez, Kevin Martinez Flores, Lizbet Jimenez
on 05/20/2024 

Program allows for customers and managers to login, each with different accesses 

Customer can submit an order, view order summary"""


import datetime
import random

products = {
   1001: {'name': 'Redbull', 'price': 10, 'stock': 500}, # attribute:value
   1002: {'name': 'Coke', 'price': 1.0, 'stock': 500},
   1003: {'name': 'Pepsi', 'price': 5.0, 'stock': 500}, #we auto end in comma w/o problem
}


#customer = [101,'hello']
customers = {
   101: {'password': 'hello', 'status':'offline'},
   102: {'password': 'hey', 'status': 'offline'},
}




manager = {
   1001: {'password': 'lmao'}
}


# #----------
order_id = 10000 #order id
orders = {} #dictionary to store orders

def calculate_order_price(product_id, quantity_purchased, customer_online):
   global products, order_id, orders

   product_price = products[product_id]['price']
   #we want to check if we have enough stock to sell
   order_price = product_price * quantity_purchased


   name = products[product_id]['name']

   #order date
   start = datetime.date(2024,1,1)
   end = datetime.date(2024,12,31)
   order_date = str(get_date(start, end))
   #print(f' order_date: {order_date}')  #DO NOT NEED THIS LINE OF CODE!!! :)

   #local dictionary to then store in bigger dictionary
   order_details = {}
   order_id += 1


   order_details['customer_id'] = customer_online
   order_details['order_date'] = order_date
   order_details['product_id'] = product_id
   order_details['name'] = name
   order_details['quantity'] = quantity_purchased
   order_details['price'] = order_price



   orders[order_id] = order_details
   #print(orders)
   #end update

   return order_price, order_date


def check_customer_online():
   #checking which customer is using it
   for cid in customers:
       customer_details = customers[cid]
       status = customer_details['status']
       if status == 'online':
           customer_online = cid # I am storing the id of customer online
       #now I put it in end of orders dictionary
   return customer_online



def submit():
    global products, order_id, orders

    customer_online = check_customer_online()

    print(f'\n{"ID":<10s}{"Product":<12s}{"Unit Price":<10s}')

    for pid in products:
        product_detail = products[pid]
        name, price, stock = product_detail['name'], product_detail['price'], product_detail['stock']
        
        print(f'{pid:<10d}{name:<12s}{price:<10.2f}')

    # Prompt user to choose a product
    product_chosen = int(input('Choose product one, two, or three > '))
    while product_chosen not in {1, 2, 3}:  # Validate user input
        print(f'This should be 1, 2, or 3. You entered {product_chosen:d}')
        product_chosen = int(input('Choose a product. Choose product one, two, or three > '))

    # Match product selected by input to product_id
    ids = {1: 1001, 2: 1002, 3: 1003}
    product_id = ids[product_chosen]

    # Check if the product is out of stock
    if check_quantity(product_id) == 0:
        print('Sorry, this product is out of stock.')
        return 

    quantity_purchased = int(input('Quantity purchased >> '))
        
        # Checking if quantity can be purchased
    if quantity_purchased > check_quantity(product_id):
        print('Not enough stock for that order')
        return
    else:
        update_quantity(product_id, quantity_purchased)
            
            
        # Compute order price: in price and quantity purchased
    order_price, order_date = calculate_order_price(product_id, quantity_purchased, customer_online)

        # Display order details
    print(f'Order ID\t\t:{order_id}')
    print(f'Order Date\t\t:{order_date}')
    print(f'Product ID\t\t:{product_id}')
    print(f'Name\t\t\t:{products[product_id]["name"]}')
    print(f'Quantity Purchased\t:{quantity_purchased}')
    print(f'Order Price\t\t:{order_price}')





def check_quantity(product_id):
   global products
   stock = products[product_id]['stock']   
   return stock




def update_quantity(product_id, quantity_purchased):
   global products
   products[product_id]['stock'] -= quantity_purchased




def display_order():
   global products, order_id, orders, customer_id
   if not orders: 
       print(f'No order to display for customer {customer_id:d}.')
       return
 
   orders_available = 0
   for order_id in orders: #loop through every key in the values


       order_details = orders[order_id] #unpacking bigger dictionary into smaller one
       #then calling the keys of it


       customer_online = check_customer_online()


       if customer_online == order_details['customer_id']: #checking who is online to orderDetails
           orders_available = 1


   if orders_available != 1:
       print('No data to display')
       return


   line = '-' * 85 #65+ 7 = 72 + 12 = 84(for customer ID)
   print(line)
   print(f'|{"Order ID":^10s}|{"Order Date":^10s}|{"Customer ID":^13s}|{"Product ID":^14s}|{"Name":^10s}|{"Quantity":^10s}|{"Price":^10s}|')
   print(line)


   for order_id in orders: #loop through every key in the values


       order_details = orders[order_id] #unpacking bigger dictionary into smaller one
       #then calling the keys of it
 
       customer_online = check_customer_online()
     
       if customer_online == order_details['customer_id']: #checking who is online to orderDetails
         
          order_date = order_details['order_date']
          product_id = order_details['product_id']
          name = order_details['name']
          quantity_purchased = order_details['quantity']
          order_price = order_details['price']
          customer_id = order_details['customer_id']
          print(f'|{order_id:^10d}|{order_date}|{customer_id:^13d}|{product_id:^14d}|{name:^10s}|{quantity_purchased:^10d}|{order_price:^10.2f}|')
   print(line)














def display_inventory():
   global products, order_id, orders
         
   print(f'ID\tName\tUnit Price\tStock\tIn Stock?')


   for product_id in products:
       product_detail = products[product_id]
     
       quantity_available = check_quantity(product_id)




       if quantity_available == 0:
           stock_status = 'No'
       else:
           stock_status = 'Yes'



       name, price, stock =product_detail['name'], product_detail['price'], product_detail['stock']
       print(f'{product_id:d}\t{name:s}\t{price:.2f}\t\t{stock:d}\t{stock_status:s}') #need to hide stock for customer but display stock for manager




   return product_id




def manager_display_order():
   global products, order_id, orders

   if not orders:#is orders empty?
       print('No data to display')
       return
   #must always check if a dictionary is empty before trying to retrieve data from it

   line = '-' * 85 #65+ 7 = 72
   print(line)
   print(f'|{"Order ID":^10s}|{"Order Date":^10s}|{"Customer ID:":^13s}|{"Product ID":^13s}|{"Name":^11s}|{"Quantity":^10s}|{"Price":^10s}|')
   print(line)


   for order_id in orders: #loop through every key in the values
       order_details = orders[order_id] #unpacking bigger dictionary into smaller one
       #then calling the keys of it


       order_date = order_details['order_date']
       product_id = order_details['product_id']
       name = order_details['name']
       quantity_purchased = order_details['quantity']
       order_price = order_details['price']


       print(f'|{order_id:<10d}|{order_date}|{customer_id:^13d}|{product_id:^13d}|{name:<11s}|{quantity_purchased:^10d}|{order_price:>10.2f}|')
       #need to fix order_date format {order_date:^10s} does not want to work 
   print(line)
       



def get_date(start_date, end_date):
  # start = datetime.date(2024,1,1)
  # end = datetime.date(2024,12,31)
  dates = []
  while start_date <= end_date:
      dates.append(start_date)
      start_date += datetime.timedelta(days=1)




  (order_date) = random.choice(dates)
  return (order_date)






def display_inventory():
   print(f'ID\tName\tUnit Price\tStock\tIn Stock?')




   for product_id in products:
       product_detail = products[product_id]
                 
       quantity_available = check_quantity(product_id)






       if quantity_available == 0:
           stock_status = 'No'
       else:
           stock_status = 'Yes'




       name, price, stock =product_detail['name'], product_detail['price'], product_detail['stock']
       print(f'{product_id:d}\t{name:s}\t{price:.2f}\t\t{stock:d}\t{stock_status:s}') #need to hide stock for customer but display stock for manager



 
def edit_prices():
   global products, order_id, orders
   display_inventory()
 


   product_chosen = 0


   quit = False   #####################
   while not quit:    #########################




       product_chosen = int(input('Enter 1, 2, or 3 to change unit price of products 1001, 1002, 1003. 4 when finished'))
       #if 4 then stop back to loop
       if product_chosen not in {1,2,3,4}:
           print(f'You entered{product_chosen:d}, please input 1,2,3,4')
           continue
       if product_chosen == 4:
           #I am assuming I want to show the changes made?
           break  ########################




       ids = {1:1001, 2:1002, 3:1003} #key:value pairs. I am stating the product_chosen:101
       product_id = ids[product_chosen] #dictionary[key] = value
       price = products[product_id]['price']
       display_inventory()   ##############



       #printing current
       print(f'Current unit price for product {product_id:d} is {price:.2f} ')
     
       #changing price
       products[product_id]['price'] = float(input('Enter new value for unit price >>'))








       #reupdating it
       price = products[product_id]['price']
       print(f'Price changed to {price:.2f} for product id {product_id:d}')
       


def reorder_inventory():
   global products, order_id, orders
 
 
   display_inventory()



   quit = False    ########
   while not quit:    ##########################
       product_chosen = int(input('Enter 1, 2, or 3 to reorder stock of product 1001, 1002, 1003. 4 if done '))
       #if 4 then stop back to loop
       if product_chosen not in {1,2,3,4}:
           print(f'You entered {product_chosen:d}. please enter 1,2,3, or 4')
           continue
       if product_chosen == 4:
           break
           
           
       ids = {1:1001, 2:1002, 3:1003} #key:value pairs. I am stating the product_chosen:101



       product_id = ids[product_chosen] #dictionary[key] = value
       stock = products[product_id]['stock']


       #showcasing current stock of that inventory
       print(f'Current stock for product {product_id:d} is {stock:d} ')
       stock = int(input('Enter quantity to be ordered >>'))
     
       #updating stock
       products[product_id]['stock'] += stock
       stock = products[product_id]['stock']
       display_inventory()   ################################



       print(f'Stock changed to {stock:d} for product id {product_id:d}')




def verify_customer():
   global customers



   #customer_id, customer_password == 0

   customer_id = int(input('Enter ID >'))



   while customer_id not in customers:
       print ('Invalid login!')
       customer_id = int(input('Enter ID >'))
 


   #change customer status to online: true
   customers[customer_id]['status'] = 'online'



   customer_password = input('Enter Password >')



   while customer_password != customers[customer_id]['password']:
       customer_password = ''
       print('Invalid password!')
       customer_password = input('Enter Password >')


   return customer_id




def verify_manager():
    global manager

    manager_id = int(input('Enter ID >'))

    while manager_id not in manager: 
        manager_id = 0
        print('Invalid Login!')
        manager_id = int(input('Enter ID >'))

    manager_password = input('Enter Password>')

    while manager_password != manager[manager_id]['password']:
        manager_password = ''
        print('Invalid password!')
        manager_password = input('Enter Password>')

    return manager_id



quit = False
while not quit:
   print('1.Login 2. Quit')
   choice = int(input('Enter 1 or 2 >>'))
   if choice == 1:
       for customer_id in customers:
           customers[customer_id]['status'] = 'offline'


       print('Choose 1 for customer or 2 for manager')
       choice = int(input('Enter 1 or 2 >>'))


       if choice == 1:
           customer_id = verify_customer()
           print(f'Welcome Customer {customer_id}! We hope you enjoy shopping at MGL Suppliers')
           while True:
               print('1. Submit Order 2.Display Order 3.Logout 4.exit')
               choice = int(input('choose 1, 2, 3 or 4 >> '))
               if choice == 1:
                   submit()
               elif choice == 2:
                   display_order()
               elif choice == 3:
                   break
               elif choice == 4:
                   quit = True
                   break

       elif choice == 2:
           manager_id = verify_manager()
           print(f'Welcome Boss {manager_id}! We continue to represent our people at MGL Suppliers.')
           while True: 
               print('1. Display Order 2. Edit Prices 3. Reorder Inventory 4.Logout 5.exit')
               choice = int(input('choose 1, 2, 3, 4, or 5 >> '))
               if choice == 1:
                   manager_display_order()
               elif choice == 2:
                   edit_prices()
               elif choice == 3:
                   reorder_inventory()
               elif choice == 4:
                   break
               elif choice == 5:
                   quit = True
                   break


   elif choice == 2:
       quit = True

